@page "/bugs/{bugId}"
@using System.Text.Json
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Bug Details - @bug?.Title</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item"><a href="/bugs">Bugs</a></li>
                    <li class="breadcrumb-item active" aria-current="page">
                        @if (bug != null) 
                        {
                            @($"{bug.Id[..8]}...")
                        } 
                        else 
                        {
                            <text>Loading...</text>
                        }
                    </li>
                </ol>
            </nav>
        </div>
    </div>

    @if (loading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading bug details...</span>
            </div>
            <p class="mt-3">Loading bug details...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            <i class="bi bi-exclamation-triangle me-2"></i>
            @errorMessage
        </div>
    }
    else if (bug != null)
    {
        <div class="row">
            <!-- Main Bug Details -->
            <div class="col-lg-8">
                <div class="card mb-4">
                    <div class="card-header bg-light d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">
                            <span class="badge @GetPriorityBadgeClass(bug.Priority) me-2">
                                @GetPriorityDisplayName(bug.Priority)
                            </span>
                            @bug.Title
                        </h4>
                        <div class="btn-group">
                            <a href="/bugs/@bug.Id/edit" class="btn btn-outline-primary btn-sm">
                                <i class="bi bi-pencil me-1"></i>Edit
                            </a>
                            <button class="btn btn-outline-secondary btn-sm" @onclick="RefreshBug">
                                <i class="bi bi-arrow-clockwise me-1"></i>Refresh
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <p class="mb-2">
                                    <strong><i class="bi bi-info-circle me-1"></i>Bug ID:</strong> 
                                    <code>@bug.Id</code>
                                </p>
                            </div>
                            <div class="col-md-6">
                                <p class="mb-2">
                                    <strong><i class="bi bi-calendar me-1"></i>Submitted:</strong> 
                                    @bug.SubmittedAt.ToString("MMM dd, yyyy 'at' h:mm tt")
                                </p>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <p class="mb-2">
                                    <strong><i class="bi bi-globe me-1"></i>URL/Menu:</strong> 
                                    @bug.UrlMenu
                                </p>
                            </div>
                            <div class="col-md-6">
                                <p class="mb-2">
                                    <strong><i class="bi bi-tag me-1"></i>Category:</strong> 
                                    @GetBugTypeDisplayName(bug.BugType)
                                </p>
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(bug.Description))
                        {
                            <div class="mb-4">
                                <h6><i class="bi bi-file-text me-2"></i>Description</h6>
                                <div class="bg-light p-3 rounded">
                                    @((MarkupString)bug.Description.Replace("\n", "<br />"))
                                </div>
                            </div>
                        }

                        <!-- Assignment Info -->
                        <div class="row mb-3">
                            @if (!string.IsNullOrEmpty(bug.PrimaryAssigneeName))
                            {
                                <div class="col-md-6">
                                    <p class="mb-2">
                                        <strong><i class="bi bi-person-check me-1"></i>Primary Assignee:</strong> 
                                        @bug.PrimaryAssigneeName
                                    </p>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(bug.SecondaryAssigneeName))
                            {
                                <div class="col-md-6">
                                    <p class="mb-2">
                                        <strong><i class="bi bi-people me-1"></i>Secondary Assignee:</strong> 
                                        @bug.SecondaryAssigneeName
                                    </p>
                                </div>
                            }
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <p class="mb-2">
                                    <strong><i class="bi bi-person me-1"></i>Submitted by:</strong> 
                                    @bug.SubmittedByName
                                </p>
                            </div>
                            @if (bug.ReopenCount > 0)
                            {
                                <div class="col-md-6">
                                    <p class="mb-2 text-warning">
                                        <strong><i class="bi bi-arrow-clockwise me-1"></i>Reopened:</strong> 
                                        @bug.ReopenCount time(s)
                                    </p>
                                </div>
                            }
                        </div>

                        <!-- QA and Developer Remarks -->
                        @if (!string.IsNullOrEmpty(bug.QaRemarks))
                        {
                            <div class="mb-3">
                                <h6><i class="bi bi-chat-square-text me-2"></i>QA Remarks</h6>
                                <div class="bg-info bg-opacity-10 p-3 rounded">
                                    @((MarkupString)bug.QaRemarks.Replace("\n", "<br />"))
                                </div>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(bug.ProgrammerRemarks))
                        {
                            <div class="mb-3">
                                <h6><i class="bi bi-code-slash me-2"></i>Developer Remarks</h6>
                                <div class="bg-success bg-opacity-10 p-3 rounded">
                                    @((MarkupString)bug.ProgrammerRemarks.Replace("\n", "<br />"))
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Images Section -->
                @if (bug.Images != null && bug.Images.Any())
                {
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="bi bi-images me-2"></i>
                                Screenshots & Images (@bug.Images.Count)
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="row g-3">
                                @foreach (var image in bug.Images)
                                {
                                    <div class="col-md-6 col-lg-4">
                                        <div class="card">
                                            <img src="@image.Url" class="card-img-top" alt="@image.Label" style="height: 200px; object-fit: cover;" />
                                            <div class="card-body p-2">
                                                <small class="text-muted">@image.Label</small>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Sidebar -->
            <div class="col-lg-4">
                <!-- Status Card -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h6 class="mb-0"><i class="bi bi-info-circle me-2"></i>Current Status</h6>
                    </div>
                    <div class="card-body text-center">
                        <span class="badge @GetStatusBadgeClass(bug.Status) fs-6 px-3 py-2">
                            @GetStatusDisplayName(bug.Status)
                        </span>
                        @if (bug.QaLastCheckTime.HasValue)
                        {
                            <p class="mt-3 mb-0 text-muted small">
                                Last QA Check: @bug.QaLastCheckTime.Value.ToString("MMM dd, yyyy")
                            </p>
                        }
                    </div>
                </div>

                <!-- Quick Actions -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h6 class="mb-0"><i class="bi bi-lightning me-2"></i>Quick Actions</h6>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-2">
                            <a href="/bugs/@bug.Id/edit" class="btn btn-outline-primary">
                                <i class="bi bi-pencil me-2"></i>Edit Bug
                            </a>
                            <button class="btn btn-outline-success" @onclick="(() => UpdateStatus((int)DevStatus.Solved))">
                                <i class="bi bi-check-circle me-2"></i>Mark as Solved
                            </button>
                            <button class="btn btn-outline-warning" @onclick="(() => UpdateStatus((int)DevStatus.DevRunning))">
                                <i class="bi bi-play-circle me-2"></i>Start Development
                            </button>
                            <button class="btn btn-outline-info" @onclick="(() => UpdateStatus((int)DevStatus.NeedToTest))">
                                <i class="bi bi-bug me-2"></i>Ready for Testing
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Bug History -->
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0"><i class="bi bi-clock-history me-2"></i>Status History</h6>
                    </div>
                    <div class="card-body">
                        @if (statusHistory != null && statusHistory.Any())
                        {
                            <div class="timeline">
                                @foreach (var entry in statusHistory.OrderByDescending(h => h.ChangedAt))
                                {
                                    <div class="timeline-item mb-3">
                                        <div class="d-flex align-items-start">
                                            <div class="flex-shrink-0 me-3">
                                                <span class="badge @GetStatusBadgeClass((int)entry.NewStatus) rounded-pill">
                                                    @GetStatusDisplayName((int)entry.NewStatus)
                                                </span>
                                            </div>
                                            <div class="flex-grow-1">
                                                <small class="text-muted">@entry.ChangedAt.ToString("MMM dd, yyyy 'at' h:mm tt")</small>
                                                @if (!string.IsNullOrEmpty(entry.Comments))
                                                {
                                                    <p class="mb-0 small">@entry.Comments</p>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <p class="text-muted">No status history available.</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-warning" role="alert">
            <i class="bi bi-exclamation-triangle me-2"></i>
            Bug not found or you don't have permission to view it.
        </div>
    }
</div>

@code {
    [Parameter] public string BugId { get; set; } = string.Empty;

    private BugResponse? bug;
    private List<BugStatusHistory> statusHistory = new();
    private bool loading = true;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadBugDetails();
    }

    private async Task LoadBugDetails()
    {
        try
        {
            loading = true;
            errorMessage = string.Empty;

            // Load bug details
            var response = await Http.GetAsync($"api/bugs/{BugId}");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                bug = JsonSerializer.Deserialize<BugResponse>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                // Load status history
                await LoadStatusHistory();
            }
            else
            {
                errorMessage = $"Failed to load bug details: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading bug: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private async Task LoadStatusHistory()
    {
        try
        {
            var response = await Http.GetAsync($"api/bugs/{BugId}/history");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                statusHistory = JsonSerializer.Deserialize<List<BugStatusHistory>>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                }) ?? new List<BugStatusHistory>();
            }
        }
        catch (Exception ex)
        {
            // Status history loading failed, but don't stop the main flow
            Console.WriteLine($"Failed to load status history: {ex.Message}");
        }
    }

    private async Task RefreshBug()
    {
        await LoadBugDetails();
    }

    private async Task UpdateStatus(int newStatus)
    {
        try
        {
            var request = new { Status = newStatus, Comments = $"Status updated to {GetStatusDisplayName(newStatus)}" };
            var response = await Http.PostAsJsonAsync($"api/bugs/{BugId}/status", request);
            
            if (response.IsSuccessStatusCode)
            {
                await LoadBugDetails(); // Refresh the bug details
            }
            else
            {
                errorMessage = "Failed to update bug status";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating status: {ex.Message}";
        }
    }

    // Helper methods for display formatting
    private string GetStatusBadgeClass(int status)
    {
        return ((DevStatus)status) switch
        {
            DevStatus.Pending => "bg-warning text-dark",
            DevStatus.DevRunning => "bg-info",
            DevStatus.NeedToTest => "bg-primary",
            DevStatus.TestRunning => "bg-secondary",
            DevStatus.Solved => "bg-success",
            DevStatus.Postpone => "bg-secondary",
            DevStatus.Invalid => "bg-danger",
            DevStatus.Canceled => "bg-dark",
            _ => "bg-secondary"
        };
    }

    private string GetStatusDisplayName(int status)
    {
        return ((DevStatus)status) switch
        {
            DevStatus.Pending => "Pending",
            DevStatus.DevRunning => "In Development",
            DevStatus.NeedToTest => "Ready for Testing",
            DevStatus.TestRunning => "Testing in Progress",
            DevStatus.Solved => "Solved",
            DevStatus.Postpone => "Postponed",
            DevStatus.Invalid => "Invalid",
            DevStatus.Canceled => "Canceled",
            _ => "Unknown"
        };
    }

    private string GetPriorityBadgeClass(int priority)
    {
        return ((Priority)priority) switch
        {
            Priority.Top => "bg-danger",
            Priority.Regular => "bg-warning text-dark",
            Priority.Medium => "bg-info",
            Priority.Low => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    private string GetPriorityDisplayName(int priority)
    {
        return ((Priority)priority) switch
        {
            Priority.Top => "Top Priority",
            Priority.Regular => "Regular",
            Priority.Medium => "Medium",
            Priority.Low => "Low",
            _ => "Unknown"
        };
    }

    private string GetBugTypeDisplayName(int bugType)
    {
        return ((BugType)bugType) switch
        {
            BugType.UiUxPc => "UI/UX (PC)",
            BugType.UiUxMobile => "UI/UX (Mobile)",
            BugType.UiUxPcAndMobile => "UI/UX (PC & Mobile)",
            BugType.Functional => "Functional",
            BugType.FunctionalEnhancement => "Functional Enhancement",
            BugType.BusinessLogic => "Business Logic",
            BugType.LoadTest => "Load Test",
            _ => "Unknown"
        };
    }

    // Models (should be moved to shared project in real implementation)
    public class BugResponse
    {
        public string Id { get; set; } = string.Empty;
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string UrlMenu { get; set; } = string.Empty;
        public int BugType { get; set; }
        public int Priority { get; set; }
        public int Status { get; set; }
        public string SubmittedById { get; set; } = string.Empty;
        public string SubmittedByName { get; set; } = string.Empty;
        public DateTime SubmittedAt { get; set; }
        public DateTime? QaLastCheckTime { get; set; }
        public string QaRemarks { get; set; } = string.Empty;
        public string ProgrammerRemarks { get; set; } = string.Empty;
        public int ReopenCount { get; set; }
        public string? PrimaryAssigneeName { get; set; }
        public string? SecondaryAssigneeName { get; set; }
        public List<BugImageResponse> Images { get; set; } = new();
    }

    public class BugImageResponse
    {
        public string Id { get; set; } = string.Empty;
        public string Label { get; set; } = string.Empty;
        public string Url { get; set; } = string.Empty;
    }

    public class BugStatusHistory
    {
        public string Id { get; set; } = string.Empty;
        public string BugId { get; set; } = string.Empty;
        public DevStatus OldStatus { get; set; }
        public DevStatus NewStatus { get; set; }
        public string ChangedById { get; set; } = string.Empty;
        public DateTime ChangedAt { get; set; }
        public string Comments { get; set; } = string.Empty;
    }

    public enum DevStatus
    {
        Pending,
        DevRunning,
        NeedToTest,
        TestRunning,
        Solved,
        Postpone,
        Invalid,
        Canceled
    }

    public enum Priority
    {
        Regular,
        Top,
        Medium,
        Low
    }

    public enum BugType
    {
        UiUxPc,
        UiUxMobile,
        UiUxPcAndMobile,
        Functional,
        FunctionalEnhancement,
        BusinessLogic,
        LoadTest
    }
}