@page "/testcases"
@using System.Text.Json
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Test Cases - Web Testing AI Agent</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2><i class="bi bi-collection text-primary me-2"></i>Test Cases</h2>
                <button class="btn btn-primary" @onclick="ShowCreateModal">
                    <i class="bi bi-plus-circle me-2"></i>Create Test Case
                </button>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-4">
                            <label class="form-label">Search</label>
                            <input type="text" class="form-control" @bind="searchTerm" @onkeyup="OnSearchKeyUp" 
                                   placeholder="Search test cases..." />
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Format</label>
                            <select class="form-select" @bind="selectedFormat">
                                <option value="">All Formats</option>
                                <option value="0">JSON</option>
                                <option value="1">YAML</option>
                                <option value="2">Gherkin</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Sort By</label>
                            <select class="form-select" @bind="sortBy">
                                <option value="UpdatedAt">Last Updated</option>
                                <option value="CreatedAt">Created Date</option>
                                <option value="Name">Name</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">&nbsp;</label>
                            <button class="btn btn-outline-primary w-100" @onclick="LoadTestCases">
                                <i class="bi bi-search"></i> Search
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (loading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3">Loading test cases...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle me-2"></i>@errorMessage
        </div>
    }
    else if (testCases?.Any() == true)
    {
        <!-- Test Cases Grid -->
        <div class="row g-4">
            @foreach (var testCase in testCases)
            {
                <div class="col-lg-4 col-md-6">
                    <div class="card border-0 shadow-sm h-100">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start mb-2">
                                <h6 class="card-title mb-0">@testCase.Name</h6>
                                <span class="badge @GetFormatBadgeClass(testCase.Format)">@testCase.Format</span>
                            </div>
                            
                            @if (!string.IsNullOrEmpty(testCase.Description))
                            {
                                <p class="card-text small text-muted mb-2">@testCase.Description</p>
                            }
                            
                            <p class="card-text small mb-2">
                                <i class="bi bi-link-45deg me-1"></i>@testCase.BaseUrl
                            </p>
                            
                            <p class="card-text small">
                                <i class="bi bi-collection me-1"></i>@testCase.StepCount steps
                                <br>
                                <i class="bi bi-calendar me-1"></i>@testCase.UpdatedAt.ToString("MMM dd, yyyy")
                            </p>

                            @if (testCase.Tags?.Any() == true)
                            {
                                <div class="mb-3">
                                    @foreach (var tag in testCase.Tags.Take(3))
                                    {
                                        <span class="badge bg-light text-dark me-1">@tag</span>
                                    }
                                    @if (testCase.Tags.Count > 3)
                                    {
                                        <span class="badge bg-light text-dark">+@(testCase.Tags.Count - 3)</span>
                                    }
                                </div>
                            }

                            <div class="btn-group w-100" role="group">
                                <button class="btn btn-sm btn-success" @onclick="() => RunTestCase(testCase.Id)">
                                    <i class="bi bi-play"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewTestCase(testCase.Id)">
                                    <i class="bi bi-eye"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-secondary" @onclick="() => ExportTestCase(testCase.Id, testCase.Format)">
                                    <i class="bi bi-download"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteTestCase(testCase.Id)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <!-- Empty State -->
        <div class="row">
            <div class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-body text-center py-5">
                        <i class="bi bi-collection text-muted display-1 mb-4"></i>
                        <h4 class="mb-3">No Test Cases Found</h4>
                        <p class="text-muted mb-4">
                            Create your first test case by recording user interactions or importing existing test data.
                        </p>
                        <button class="btn btn-primary btn-lg me-3" @onclick="ShowCreateModal">
                            <i class="bi bi-plus-circle me-2"></i>Create Test Case
                        </button>
                        <a href="/recording" class="btn btn-outline-primary btn-lg">
                            <i class="bi bi-record-circle me-2"></i>Start Recording
                        </a>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Create Test Case Modal -->
@if (showCreateModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-plus-circle me-2"></i>Create Test Case
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseCreateModal"></button>
                </div>
                <EditForm Model="createRequest" OnValidSubmit="CreateTestCase">
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        @if (!string.IsNullOrEmpty(modalErrorMessage))
                        {
                            <div class="alert alert-danger">
                                <i class="bi bi-exclamation-triangle me-2"></i>@modalErrorMessage
                            </div>
                        }

                        <div class="mb-3">
                            <label class="form-label">Name <span class="text-danger">*</span></label>
                            <InputText class="form-control" @bind-Value="createRequest.Name" 
                                     placeholder="Enter test case name" />
                            <ValidationMessage For="@(() => createRequest.Name)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <InputTextArea class="form-control" @bind-Value="createRequest.Description" 
                                         placeholder="Enter test case description" rows="3" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Base URL <span class="text-danger">*</span></label>
                            <InputText class="form-control" @bind-Value="createRequest.BaseUrl" 
                                     placeholder="https://example.com" />
                            <ValidationMessage For="@(() => createRequest.BaseUrl)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Format</label>
                            <InputSelect class="form-select" @bind-Value="createRequest.Format">
                                <option value="0">JSON</option>
                                <option value="1">YAML</option>
                                <option value="2">Gherkin</option>
                            </InputSelect>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Tags</label>
                            <InputText class="form-control" @bind-Value="tagsInput" 
                                     placeholder="Enter tags separated by commas" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseCreateModal">Cancel</button>
                        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            <i class="bi bi-plus-circle me-2"></i>Create Test Case
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    private List<TestCaseResponse>? testCases;
    private bool loading = true;
    private bool showCreateModal = false;
    private bool isSubmitting = false;
    private string errorMessage = string.Empty;
    private string modalErrorMessage = string.Empty;

    // Filter properties
    private string searchTerm = string.Empty;
    private string selectedFormat = string.Empty;
    private string sortBy = "UpdatedAt";

    // Create modal properties
    private CreateTestCaseRequest createRequest = new();
    private string tagsInput = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadTestCases();
    }

    private async Task LoadTestCases()
    {
        try
        {
            loading = true;
            errorMessage = string.Empty;

            var queryParams = new List<string>();
            if (!string.IsNullOrEmpty(searchTerm))
                queryParams.Add($"searchTerm={Uri.EscapeDataString(searchTerm)}");
            if (!string.IsNullOrEmpty(selectedFormat))
                queryParams.Add($"format={selectedFormat}");
            queryParams.Add($"sortBy={sortBy}");
            queryParams.Add("sortDescending=true");

            var query = string.Join("&", queryParams);
            var url = $"http://localhost:5146/api/testcases?{query}";

            var response = await Http.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                testCases = JsonSerializer.Deserialize<List<TestCaseResponse>>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
            }
            else
            {
                errorMessage = "Failed to load test cases";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading test cases: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private async Task OnSearchKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await LoadTestCases();
        }
    }

    private void ShowCreateModal()
    {
        createRequest = new CreateTestCaseRequest();
        tagsInput = string.Empty;
        modalErrorMessage = string.Empty;
        showCreateModal = true;
    }

    private void CloseCreateModal()
    {
        showCreateModal = false;
    }

    private async Task CreateTestCase()
    {
        try
        {
            isSubmitting = true;
            modalErrorMessage = string.Empty;

            // Parse tags
            if (!string.IsNullOrEmpty(tagsInput))
            {
                createRequest.Tags = tagsInput.Split(',').Select(t => t.Trim()).Where(t => !string.IsNullOrEmpty(t)).ToList();
            }

            var json = JsonSerializer.Serialize(createRequest);
            var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

            var response = await Http.PostAsync("http://localhost:5146/api/testcases", content);
            if (response.IsSuccessStatusCode)
            {
                CloseCreateModal();
                await LoadTestCases();
            }
            else
            {
                var errorResponse = await response.Content.ReadAsStringAsync();
                modalErrorMessage = $"Failed to create test case: {errorResponse}";
            }
        }
        catch (Exception ex)
        {
            modalErrorMessage = $"Error creating test case: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task RunTestCase(string testCaseId)
    {
        try
        {
            var executeRequest = new { TestCaseId = testCaseId };
            var json = JsonSerializer.Serialize(executeRequest);
            var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

            var response = await Http.PostAsync("http://localhost:5146/api/execution/execute", content);
            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Test case execution started! Check the Execution page for progress.");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to start test case execution.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error starting execution: {ex.Message}");
        }
    }

    private async Task ViewTestCase(string testCaseId)
    {
        // TODO: Navigate to test case detail page
        await JSRuntime.InvokeVoidAsync("alert", "View test case functionality coming soon!");
    }

    private async Task ExportTestCase(string testCaseId, TestCaseFormat format)
    {
        try
        {
            var response = await Http.GetAsync($"http://localhost:5146/api/testcases/{testCaseId}/export?format={format}");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsByteArrayAsync();
                var fileName = response.Content.Headers.ContentDisposition?.FileName ?? $"testcase-{testCaseId}.txt";
                
                await JSRuntime.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(content));
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to export test case.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error exporting test case: {ex.Message}");
        }
    }

    private async Task DeleteTestCase(string testCaseId)
    {
        try
        {
            if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this test case?"))
            {
                var response = await Http.DeleteAsync($"http://localhost:5146/api/testcases/{testCaseId}");
                if (response.IsSuccessStatusCode)
                {
                    await LoadTestCases();
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Failed to delete test case.");
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error deleting test case: {ex.Message}");
        }
    }

    private string GetFormatBadgeClass(TestCaseFormat format)
    {
        return format switch
        {
            TestCaseFormat.Json => "bg-primary",
            TestCaseFormat.Yaml => "bg-warning",
            TestCaseFormat.Gherkin => "bg-success",
            _ => "bg-secondary"
        };
    }

    // Models for this component
    public class TestCaseResponse
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string BaseUrl { get; set; } = string.Empty;
        public int StepCount { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime UpdatedAt { get; set; }
        public List<string> Tags { get; set; } = new();
        public TestCaseFormat Format { get; set; }
    }

    public class CreateTestCaseRequest
    {
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string BaseUrl { get; set; } = string.Empty;
        public List<string> Tags { get; set; } = new();
        public TestCaseFormat Format { get; set; } = TestCaseFormat.Json;
    }

    public enum TestCaseFormat
    {
        Json,
        Yaml,
        Gherkin
    }
}

<script>
    window.downloadFile = (fileName, content) => {
        const link = document.createElement('a');
        link.download = fileName;
        link.href = `data:application/octet-stream;base64,${content}`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
</script>