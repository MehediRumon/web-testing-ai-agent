@page "/login"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>Login - Bug Tracking System</PageTitle>

<div class="container-fluid vh-100">
    <div class="row h-100 justify-content-center align-items-center">
        <div class="col-md-6 col-lg-4">
            <div class="card shadow-lg border-0">
                <div class="card-header bg-primary text-white text-center py-4">
                    <h3 class="mb-0">
                        <i class="bi bi-bug-fill me-2"></i>
                        Bug Tracking System
                    </h3>
                    <p class="mb-0 mt-2">Please sign in to continue</p>
                </div>
                <div class="card-body p-4">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            @errorMessage
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success" role="alert">
                            <i class="bi bi-check-circle me-2"></i>
                            @successMessage
                        </div>
                    }

                    <EditForm Model="loginRequest" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">
                                <i class="bi bi-person me-1"></i>Username or Email
                            </label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-person"></i></span>
                                <InputText class="form-control" @bind-Value="loginRequest.Username" 
                                         placeholder="Enter your username or email" />
                            </div>
                            <ValidationMessage For="@(() => loginRequest.Username)" class="text-danger" />
                        </div>

                        <div class="mb-4">
                            <label class="form-label">
                                <i class="bi bi-lock me-1"></i>Password
                            </label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-lock"></i></span>
                                <InputText type="password" class="form-control" @bind-Value="loginRequest.Password" 
                                         placeholder="Enter your password" />
                            </div>
                            <ValidationMessage For="@(() => loginRequest.Password)" class="text-danger" />
                        </div>

                        <div class="mb-3 form-check">
                            <InputCheckbox class="form-check-input" @bind-Value="loginRequest.RememberMe" />
                            <label class="form-check-label">
                                Remember me
                            </label>
                        </div>

                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary btn-lg" disabled="@isLoggingIn">
                                @if (isLoggingIn)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                <i class="bi bi-box-arrow-in-right me-2"></i>Sign In
                            </button>
                        </div>
                    </EditForm>

                    <hr class="my-4">

                    <div class="text-center">
                        <p class="text-muted mb-3">Super Admin Login Only:</p>
                        <div class="row g-2">
                            <div class="col-12">
                                <button class="btn btn-outline-secondary btn-sm w-100" 
                                        @onclick="@(() => QuickLogin("superadmin", "admin123"))">
                                    <i class="bi bi-shield-check me-1"></i>Super Admin
                                </button>
                            </div>
                        </div>
                        <small class="text-muted mt-2 d-block">
                            Other users will be created by Super Admin after login
                        </small>
                    </div>
                </div>
                <div class="card-footer text-center text-muted">
                    <small>
                        <i class="bi bi-info-circle me-1"></i>
                        Secure Bug Tracking & Management Platform
                    </small>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    body {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    
    .card {
        border-radius: 1rem;
        backdrop-filter: blur(10px);
    }
    
    .card-header {
        border-radius: 1rem 1rem 0 0 !important;
    }
    
    .btn {
        border-radius: 0.5rem;
    }
    
    .input-group-text {
        border-radius: 0.375rem 0 0 0.375rem;
    }
    
    .form-control {
        border-radius: 0 0.375rem 0.375rem 0;
    }
</style>

@code {
    private LoginRequest loginRequest = new();
    private bool isLoggingIn = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already logged in
        await CheckExistingLogin();
    }

    private async Task CheckExistingLogin()
    {
        try
        {
            // Check if there's an existing session (this would be replaced with actual authentication)
            var isLoggedIn = await JSRuntime.InvokeAsync<bool>("localStorage.getItem", "isLoggedIn");
            if (isLoggedIn)
            {
                NavigationManager.NavigateTo("/");
            }
        }
        catch
        {
            // No existing login found
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            isLoggingIn = true;
            errorMessage = string.Empty;
            successMessage = string.Empty;

            // Simulate authentication (in real implementation, this would call an API)
            await Task.Delay(1000); // Simulate network delay

            // Simple demo authentication logic
            bool isValidUser = ValidateUser(loginRequest.Username, loginRequest.Password);

            if (isValidUser)
            {
                // Store login status and set user context
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "isLoggedIn", "true");
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "username", loginRequest.Username);
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "userId", "super-admin-1");

                successMessage = "Login successful! Redirecting...";
                await Task.Delay(1000);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = "Invalid username or password. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Login failed: {ex.Message}";
        }
        finally
        {
            isLoggingIn = false;
        }
    }

    private async Task QuickLogin(string username, string password)
    {
        loginRequest.Username = username;
        loginRequest.Password = password;
        await HandleLogin();
    }

    private bool ValidateUser(string username, string password)
    {
        // Only allow super admin login
        return username.ToLower() == "superadmin" && password == "admin123";
    }

    public class LoginRequest
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; } = false;
    }
}