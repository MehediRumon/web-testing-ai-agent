@page "/create-run"
@using WebTestingAiAgent.Core.Models
@using System.Text.Json
@inject HttpClient Http

<PageTitle>Create Test Run</PageTitle>

<h1>Create New Test Run</h1>

<div class="row">
    <div class="col-md-8">
        <EditForm Model="@request" OnValidSubmit="@HandleSubmit" FormName="CreateRun">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <div class="mb-3">
                <label for="objective" class="form-label">Test Objective</label>
                <textarea id="objective" class="form-control" @bind="request.Objective" 
                         rows="4" placeholder="Describe what you want to test in natural language..."></textarea>
                <div class="form-text">
                    Example: "Test the login functionality with valid and invalid credentials, then verify the user dashboard loads correctly"
                </div>
            </div>

            <div class="mb-3">
                <label for="baseUrl" class="form-label">Base URL</label>
                <input type="url" id="baseUrl" class="form-control" @bind="request.BaseUrl" 
                       placeholder="https://your-app.example.com" />
                <div class="form-text">The base URL of the application to test</div>
            </div>

            <div class="mb-3">
                <h5>Configuration</h5>
                <div class="row">
                    <div class="col-md-4">
                        <label for="timeBudget" class="form-label">Time Budget (seconds)</label>
                        <input type="number" id="timeBudget" class="form-control" 
                               @bind="config.Exploration.TimeBudgetSec" min="30" max="3600" />
                    </div>
                    <div class="col-md-4">
                        <label for="explorationDepth" class="form-label">Exploration Depth</label>
                        <input type="number" id="explorationDepth" class="form-control" 
                               @bind="config.Exploration.MaxDepth" min="0" max="5" />
                    </div>
                    <div class="col-md-4">
                        <label for="parallel" class="form-label">Parallel Workers</label>
                        <input type="number" id="parallel" class="form-control" 
                               @bind="config.Parallel" min="1" max="20" />
                    </div>
                </div>
            </div>

            <div class="mb-3">
                <div class="form-check">
                    <input type="checkbox" id="headless" class="form-check-input" @bind="config.Headless" />
                    <label for="headless" class="form-check-label">Headless Mode</label>
                    <div class="form-text">
                        When unchecked, you'll see the browser window during test execution. Check this box to run tests invisibly in the background.
                    </div>
                </div>
                <div class="form-check">
                    <input type="checkbox" id="captureNetwork" class="form-check-input" @bind="config.Evidence.CaptureNetwork" />
                    <label for="captureNetwork" class="form-check-label">Capture Network Traffic</label>
                </div>
                <div class="form-check">
                    <input type="checkbox" id="verboseEvidence" class="form-check-input" @bind="config.Evidence.Verbose" />
                    <label for="verboseEvidence" class="form-check-label">Verbose Evidence Capture</label>
                </div>
            </div>

            <div class="mb-3">
                <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                    @if (isSubmitting)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span>Creating Run...</span>
                    }
                    else
                    {
                        <span>Create Test Run</span>
                    }
                </button>
                <a href="/" class="btn btn-secondary ms-2">Cancel</a>
            </div>
        </EditForm>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3">
                <h5><i class="bi bi-exclamation-triangle-fill"></i> Error</h5>
                <pre style="white-space: pre-line; background: none; border: none; padding: 0; margin: 0; font-family: inherit;">@errorMessage</pre>
                @if (validationErrors.Any())
                {
                    <div class="mt-3">
                        <h6>Validation Issues:</h6>
                        <ul class="mb-0">
                            @foreach (var error in validationErrors)
                            {
                                <li><strong>@error.Field:</strong> @error.Message</li>
                            }
                        </ul>
                    </div>
                }
                <div class="mt-3">
                    <button type="button" class="btn btn-outline-danger" @onclick="() => errorMessage = string.Empty">
                        <i class="bi bi-x-circle"></i> Dismiss
                    </button>
                </div>
            </div>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success mt-3">
                <h5><i class="bi bi-check-circle-fill"></i> Success!</h5>
                <pre style="white-space: pre-line; background: none; border: none; padding: 0; margin: 0; font-family: inherit;">@successMessage</pre>
                <div class="mt-3">
                    <a href="/runs" class="btn btn-success me-2">
                        <i class="bi bi-list-task"></i> View Active Runs
                    </a>
                    <button type="button" class="btn btn-outline-success" @onclick="() => successMessage = string.Empty">
                        <i class="bi bi-plus-circle"></i> Create Another Run
                    </button>
                </div>
            </div>
        }
    </div>

    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5>Tips for Writing Objectives</h5>
            </div>
            <div class="card-body">
                <ul class="list-unstyled">
                    <li><strong>Be specific:</strong> Include what actions to take and what to verify</li>
                    <li><strong>Include scenarios:</strong> Test both success and failure paths</li>
                    <li><strong>Mention data:</strong> Specify test credentials or data if needed</li>
                    <li><strong>Set expectations:</strong> Describe what success looks like</li>
                </ul>
                
                <hr />
                
                <h6>Example Objectives:</h6>
                <small class="text-muted">
                    "Test user registration with valid email and password, verify confirmation email is sent, then test login with the new account"
                </small>
                <br /><br />
                <small class="text-muted">
                    "Navigate to the shopping cart, add three different products, verify total calculation, then proceed through checkout process"
                </small>
            </div>
        </div>
    </div>
</div>

@code {
    private CreateRunRequest request = new();
    private AgentConfig config = new();
    private bool isSubmitting = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private List<ValidationError> validationErrors = new();

    protected override void OnInitialized()
    {
        request.Config = config;
    }

    private async Task HandleSubmit()
    {
        isSubmitting = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        validationErrors.Clear();

        try
        {
            request.Config = config;
            
            var response = await Http.PostAsJsonAsync("http://localhost:5146/api/runs", request);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<CreateRunResponse>();
                var runIdShort = result?.RunId?[..8] ?? "unknown";
                successMessage = $"üéâ Test run created successfully!\n\n" +
                               $"üìã Run ID: {runIdShort}...\n" +
                               $"üéØ Objective: {request.Objective}\n" +
                               $"üåê Target URL: {request.BaseUrl}\n" +
                               $"‚è±Ô∏è Expected completion: 1-3 minutes\n\n" +
                               $"Your test is now queued and will start shortly. " +
                               $"Click 'View Active Runs' below to monitor progress in real-time.";
                
                // Reset form
                request = new CreateRunRequest();
                config = new AgentConfig();
                request.Config = config;
            }
            else
            {
                var errorResponse = await response.Content.ReadFromJsonAsync<ApiErrorResponse>();
                var baseErrorMessage = errorResponse?.Message ?? "Failed to create run";
                
                // Provide more helpful error messages based on common issues
                if (baseErrorMessage.Contains("validation") || baseErrorMessage.Contains("invalid"))
                {
                    errorMessage = $"‚ùå Validation Error\n\n{baseErrorMessage}\n\nPlease check your inputs and try again.";
                }
                else if (baseErrorMessage.Contains("connection") || baseErrorMessage.Contains("network"))
                {
                    errorMessage = $"üåê Connection Error\n\nUnable to reach the API server. Please ensure:\n‚Ä¢ The API server is running (http://localhost:5146)\n‚Ä¢ Your network connection is stable\n‚Ä¢ No firewall is blocking the connection";
                }
                else
                {
                    errorMessage = $"‚ö†Ô∏è Request Failed\n\n{baseErrorMessage}\n\nIf this problem persists, please check the server logs for more details.";
                }
                
                validationErrors = errorResponse?.Errors ?? new List<ValidationError>();
            }
        }
        catch (Exception ex)
        {
            // Provide user-friendly error messages for common exceptions
            if (ex.Message.Contains("Failed to fetch") || ex.Message.Contains("fetch"))
            {
                errorMessage = $"üåê Connection Failed\n\nCannot connect to the API server. Please:\n‚Ä¢ Start the API server: cd WebTestingAiAgent.Api && dotnet run\n‚Ä¢ Verify it's running at http://localhost:5146\n‚Ä¢ Check your firewall settings";
            }
            else if (ex.Message.Contains("connection") || ex.Message.Contains("HttpRequestException"))
            {
                errorMessage = $"üåê Connection Failed\n\nCannot connect to the API server. Please:\n‚Ä¢ Start the API server: cd WebTestingAiAgent.Api && dotnet run\n‚Ä¢ Verify it's running at http://localhost:5146\n‚Ä¢ Check your firewall settings";
            }
            else if (ex.Message.Contains("timeout"))
            {
                errorMessage = $"‚è±Ô∏è Request Timeout\n\nThe request took too long to complete. This might be due to:\n‚Ä¢ Network connectivity issues\n‚Ä¢ API server overload\n‚Ä¢ Large test objective processing";
            }
            else
            {
                errorMessage = $"üí• Unexpected Error\n\n{ex.Message}\n\nPlease try again. If the problem persists, check the browser console for more details.";
            }
        }
        finally
        {
            isSubmitting = false;
        }
    }
}